/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.dcgov.parsedc;

import org.appcelerator.kroll.KrollModule;

import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import com.parse.Parse;
import com.parse.ParsePush;
import com.parse.SaveCallback;
import com.parse.ParseInstallation;
import com.parse.ParseException;


@Kroll.module(name="Parsedc", id="com.dcgov.parsedc")
public class ParsedcModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "ParsedcModule";

	// tiapp.xml properties containing Parse's app id and client key
    public static String PROPERTY_APP_ID = "Parse_AppId";
    public static String PROPERTY_CLIENT_KEY = "Parse_ClientKey";
    
    
	
	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	

	public ParsedcModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		//Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
		String appId = TiApplication.getInstance().getAppProperties().getString(ParsedcModule.PROPERTY_APP_ID, "");
        String clientKey = TiApplication.getInstance().getAppProperties().getString(ParsedcModule.PROPERTY_CLIENT_KEY, "");
        Log.d(TAG, "Initializing with: " + appId + ", " + clientKey + ";");
        
        Parse.initialize(TiApplication.getInstance(), appId, clientKey);
        ParseInstallation.getCurrentInstallation().saveInBackground();
        
        ParsePush.subscribeInBackground("", new SaveCallback() {
			  @Override
			  public void done(ParseException e) {
			    if (e != null) {
			      Log.e("com.parse.push", "successfully subscribed to the broadcast channel.");
			    } else {
			      Log.e("com.parse.push", "failed to subscribe for push", e);
			    }
			  }
			});
        
        //PushService.setDefaultPushCallback(context, TiApplication.getCurrentActivity.getClass());
        
        
     // Track Push opens
        //ParseAnalytics.trackAppOpened(TiApplication.getCurrentActivity().getIntent());
        //Context context = TiApplication.getInstance().getApplicationContext();
        //SaveCallback.setDefaultPushCallback(context, TiApplication.getCurrentActivity.getClass());
		
	}

	// Methods
	@Kroll.method
	public void enablePush() {
		// Register Push
		ParseInstallation.getCurrentInstallation().saveInBackground();
		
		
		
    }
	

	public static ParsedcModule getInstance() {
		return ParsedcModule.getInstance();
	}
	

}

